// This has been generated with https://nickcoutsos.github.io/keymap-editor/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "mouse.dtsi"

&sk {
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {
    ignore-modifiers; // allow chording sitcky mods & layers
};

&caps_word {
    /delete-property/ ignore-modifiers;  // mods deactivate caps-word, requires PR #1451
};

/ {
    combos {
        compatible = "zmk,combos";
        /*
        db_combo {
            bindings = <&bspc_del>;
            key-positions = <7 8>;
            timeout-ms = <20>;
            require-prior-idle-ms = <120>;
        };

        tab_combo {
            bindings = <&kp TAB>;
            key-positions = <3 4>;
            timeout-ms = <18>;
            require-prior-idle-ms = <200>;
        };

        esc_combo {
            bindings = <&hmr RS(RCTRL) ESC>;
            key-positions = <19 20>;
            timeout-ms = <20>;
            require-prior-idle-ms = <200>;
        };
        */

        cancel {
            bindings = <&hml LS(LCTRL) K_CANCEL>;
            key-positions = <15 16>;
            timeout-ms = <20>;
            require-prior-idle-ms = <150>;
        };

        mouse_combo {
            bindings = <&smart_mouse>;
            key-positions = <2 4>;
            timeout-ms = <20>;
            require-prior-idle-ms = <200>;
        };
    };

    macros {
        win_bt: win_bt {
            label = "win_bt";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to2>,
                <&macro_tap>,
                <&bt BT_SEL MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&to 0>;
        };

        mac_bt: mac_bt {
            label = "mac_bt";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to2>,
                <&macro_tap>,
                <&bt BT_SEL MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&to 4>;
        };

        // Special case for the number layer, this issues a cancel before pressing
        // momentary layer to ensure that any sticky num layer is cleared before
        // activating the given layer.
        // This prevents activating the function layer when a sticky number layer is in
        // effect when selecting an arrow key and firing a function key by mistake.

        clr_mo: clr_mo {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;

            label = "CLR_MO";
        };
    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            retro-tap;
            hold-trigger-key-positions = <39 40 41 1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            retro-tap;
            hold-trigger-key-positions = <36 37 38 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 39 40 41>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHFT";
            bindings = <&sk RSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        // tap: sticky num-layer | shift-tap: num-word | hold: num-layer

        smart_numw: smart_numw {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_NUMW";
            bindings = <&mo>, <&sticky_numw>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "hold-preferred";
        };

        sticky_numw: sticky_numw {
            compatible = "zmk,behavior-mod-morph";
            label = "STICKY_NUMW";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&sl 2>, <&num_wordw>;
        };

        num_wordw: num_wordw {
            compatible = "zmk,behavior-caps-word";
            label = "NUM_WORDW";
            #binding-cells = <0>;
            layers = <2>;
            continue-list = <BSPC DEL DOT MINUS PLUS>;
            ignore-numbers;
        };

        // tap: sticky num-layer | shift-tap: num-word | hold: num-layer

        smart_numm: smart_numm {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_NUMM";
            bindings = <&mo>, <&sticky_numm>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
        };

        sticky_numm: sticky_numm {
            compatible = "zmk,behavior-mod-morph";
            label = "STICKY_NUMM";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&sl 6>, <&num_wordm>;
        };

        num_wordm: num_wordm {
            compatible = "zmk,behavior-caps-word";
            label = "NUM_WORDM";
            #binding-cells = <0>;
            layers = <6>;
            continue-list = <BSPC DEL DOT MINUS PLUS>;
            ignore-numbers;
        };

        // tap: sticky num-layer | shift-tap: num-word | hold: num-layer

        smart_numc: smart_numc {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_NUMC";
            bindings = <&mo>, <&sticky_numc>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
        };

        sticky_numc: sticky_numc {
            compatible = "zmk,behavior-mod-morph";
            label = "STICKY_NUMC";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&sl 10>, <&num_wordc>;
        };

        num_wordc: num_wordc {
            compatible = "zmk,behavior-caps-word";
            label = "NUM_WORDC";
            #binding-cells = <0>;
            layers = <10>;
            continue-list = <BSPC DEL DOT MINUS PLUS>;
            ignore-numbers;
        };

        smart_mouse: smart_mouse {
            compatible = "zmk,behavior-tri-state";
            label = "SMART_MOUSE";
            bindings = <&tog 12>, <&none>, <&tog 12>;

            #binding-cells = <0>;
            ignored-key-positions = <2 4 7 8 9 13 14 15 16 19 20 21 38 39 40 41>;
            ignored-layers = <12>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        win_base {
            bindings = <
&trans  &kp Q        &kp W            &kp E         &kp R         &kp T        &kp Y        &kp U            &kp I         &kp O            &kp P           &trans
&trans  &hml LGUI A  &hml LEFT_ALT S  &hml LCTRL D  &hml LSHFT F  &kp G        &kp H        &hmr RSHFT J     &hmr RCTRL K  &hmr LEFT_ALT L  &hmr LGUI SEMI  &trans
&trans  &kp Z        &kp X            &kp C         &kp V         &kp B        &kp N        &kp M            &kp COMMA     &kp DOT          &kp FSLH        &trans
                                      &kp TAB       &mo 1         &kp SPACE    &smart_shft  &smart_numw 2 0  &kp ENTER
            >;

            label = "Win";
        };

        win_nav {
            bindings = <
&trans  &kp EXCL   &kp LS(N2)  &kp SQT    &kp GRAVE  &kp UNDER    &none       &kp HOME  &kp UP    &kp END    &kp PG_UP  &trans
&trans  &kp LGUI   &kp LALT    &kp LCTRL  &kp LSHFT  &kp MINUS    &none       &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN  &trans
&trans  &kp LC(Z)  &kp LC(X)   &kp LC(C)  &kp LC(V)  &none        &kp PIPE2   &kp LBRC  &kp RBRC  &kp LBKT   &kp RBKT   &trans
                               &trans     &trans     &trans       &kp BSPC    &kp DEL   &kp ESC
            >;

            label = "< $ym >";
        };

        win_num {
            bindings = <
&trans  &kp EXCL    &kp DQT    &kp NUHS  &kp DLLR   &kp PRCNT    &kp CARET  &kp AMPS  &kp ASTERISK  &kp LPAR  &kp RPAR  &trans
&trans  &kp N1      &kp N2     &kp N3    &kp N4     &kp N5       &kp N6     &kp N7    &kp N8        &kp N9    &kp N0    &trans
&trans  &kp TILDE2  &kp MINUS  &kp PLUS  &kp EQUAL  &kp NUBS     &none      &trans    &trans        &trans    &trans    &trans
                               &trans    &clr_mo 1  &trans       &kp BSPC   &trans    &kp ESC
            >;

            label = "1 2 3";
        };

        win_fun {
            bindings = <
&trans  &win_bt 0  &mac_bt 1   &mac_bt 2   &win_bt 3   &win_bt 4      &bt BT_CLR   &trans      &none   &to 8   &to 4    &trans
&trans  &kp F1     &kp F2      &kp F3      &kp F4      &kp F5         &kp F6       &kp F7      &kp F8  &kp F8  &kp F10  &trans
&trans  &kp F11    &bt BT_PRV  &bt BT_NXT  &sys_reset  &bootloader    &bootloader  &sys_reset  &none   &none   &kp F12  &trans
                               &trans      &trans      &trans         &trans       &trans      &trans
            >;

            label = "Fun !!";
        };

        mac_base {
            bindings = <
&trans  &kp Q        &kp W        &kp E         &kp R         &kp T        &kp Y        &kp U            &kp I         &kp O            &kp P           &trans
&trans  &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F  &kp G        &kp H        &hmr RSHFT J     &hmr RCTRL K  &hmr LEFT_ALT L  &hmr LGUI SEMI  &trans
&trans  &kp Z        &kp X        &kp C         &kp V         &kp B        &kp N        &kp M            &kp COMMA     &kp DOT          &kp FSLH        &trans
                                  &kp TAB       &mo 5         &kp SPACE    &smart_shft  &smart_numm 6 0  &kp ENTER
            >;

            label = "Mac";
        };

        mac_nav {
            bindings = <
&trans  &kp EXCL   &kp DQT    &kp SQT    &kp GRAVE  &kp UNDER    &none       &kp HOME  &kp UP    &kp END    &kp PG_UP  &trans
&trans  &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &kp MINUS    &none       &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN  &trans
&trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &none        &kp PIPE    &kp LBRC  &kp RBRC  &kp LBKT   &kp RBKT   &trans
                              &trans     &trans     &trans       &kp BSPC    &kp DEL   &kp ESC
            >;

            label = "< Nav >";
        };

        mac_num {
            bindings = <
&trans  &kp EXCL   &kp LS(N2)  &kp LA(N3)  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPS  &kp ASTRK  &kp LPAR  &kp RPAR  &trans
&trans  &kp N1     &kp N2      &kp N3      &kp N4      &kp N5         &kp N6     &kp N7    &kp N8     &kp N9    &kp N0    &trans
&trans  &kp TILDE  &kp MINUS   &kp PLUS    &kp EQUAL   &kp BSLH       &trans     &trans    &trans     &trans    &trans    &trans
                               &trans      &clr_mo 5   &trans         &kp BSPC   &trans    &kp ESC
            >;

            label = "0 1 2";
        };

        mac_fun {
            bindings = <
&trans  &win_bt 0  &mac_bt 1   &mac_bt 2   &win_bt 3   &win_bt 4      &bt BT_CLR   &trans      &trans  &to 8   &to 0    &trans
&trans  &kp F1     &kp F2      &kp F3      &kp F4      &kp F5         &kp F6       &kp F7      &kp F8  &kp F8  &kp F10  &trans
&trans  &kp F11    &bt BT_PRV  &bt BT_NXT  &sys_reset  &bootloader    &bootloader  &sys_reset  &trans  &trans  &kp F12  &trans
                               &trans      &trans      &trans         &trans       &trans      &trans
            >;

            label = "FunKy";
        };

        cmw_base {
            bindings = <
&trans  &kp Q        &kp W            &kp F         &kp P         &kp B        &kp J        &kp L             &kp U         &kp Y            &kp SEMI     &trans
&trans  &hml LGUI A  &hml LEFT_ALT R  &hml LCTRL S  &hml LSHFT T  &kp G        &kp M        &hmr RSHFT N      &hmr RCTRL E  &hmr LEFT_ALT I  &hmr LGUI O  &trans
&trans  &kp Z        &kp X            &kp C         &kp D         &kp V        &kp K        &kp H             &kp COMMA     &kp DOT          &kp FSLH     &trans
                                      &kp TAB       &mo 9         &kp SPACE    &smart_shft  &smart_numc 10 0  &kp ENTER
            >;

            label = "CoMak";
        };

        cmw_nav {
            bindings = <
&trans  &kp EXCL   &kp LS(N2)    &kp SQT    &kp GRAVE  &kp UNDER    &none       &kp HOME        &kp UP           &kp END           &kp PG_UP  &trans
&trans  &kp LGUI   &kp LEFT_ALT  &kp LCTRL  &kp LSHFT  &kp MINUS    &none       &kp LEFT        &kp DOWN         &kp RIGHT         &kp PG_DN  &trans
&trans  &kp LC(Z)  &kp LC(X)     &kp LC(C)  &kp LC(V)  &none        &kp PIPE2   &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RBKT   &trans
                                 &trans     &trans     &trans       &kp BSPC    &kp DEL         &kp ESC
            >;

            label = "< NAV >";
        };

        cmw_num {
            bindings = <
&trans  &kp EXCL  &kp DQT    &kp NUHS  &kp DLLR   &kp PRCNT    &kp CARET     &kp AMPS  &kp ASTERISK  &kp LPAR  &kp RPAR  &trans
&trans  &kp N1    &kp N2     &kp N3    &kp N4     &kp N5       &kp N6        &kp N7    &kp N8        &kp N9    &kp N0    &trans
&trans  &kp SQT   &kp MINUS  &kp PLUS  &trans     &trans       &kp K_CANCEL  &trans    &trans        &trans    &trans    &trans
                             &trans    &clr_mo 9  &trans       &kp BSPC      &trans    &kp ESC
            >;

            label = "C 1 2 3";
        };

        cmw_fun {
            bindings = <
&trans  &win_bt 0  &mac_bt 1   &mac_bt 2   &win_bt 3   &win_bt 4      &bt BT_CLR   &trans      &trans  &trans  &to 4    &trans
&trans  &kp F1     &kp F2      &kp F3      &kp F4      &kp F5         &kp F6       &kp F7      &kp F8  &kp F8  &kp F10  &trans
&trans  &kp F11    &bt BT_PRV  &bt BT_NXT  &sys_reset  &bootloader    &bootloader  &sys_reset  &trans  &trans  &kp F12  &trans
                               &trans      &trans      &trans         &trans       &trans      &trans
            >;

            label = "C Fun";
        };

        mouse {
            bindings = <
&trans     &trans     &trans  &trans                       &trans  &trans    &trans U_WH_D U_MS_U U_WH_U  &trans  &trans  &trans     &kp LGUI   &kp LALT
&kp LCTRL  &kp LSHFT  &trans  &trans U_MS_L U_MS_D U_MS_R  &trans  &trans    &trans                       &trans  &trans  &trans     &trans     &trans
&trans     &trans     &trans  &trans                       &trans  &trans    &trans                       &trans  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK
            >;

            label = "MOUSE";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        ctrl_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };

        mac_ctrl_layer {
            if-layers = <5 6>;
            then-layer = <7>;
        };

        cmw_ctrl_layer {
            if-layers = <9 10>;
            then-layer = <11>;
        };
    };
};

